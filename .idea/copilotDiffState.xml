<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.learning&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.learning&quot;&#10;        minSdk = 21&#10;    targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.0&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#13;&#10;    alias(libs.plugins.android.application)&#13;&#10;    alias(libs.plugins.kotlin.android)&#13;&#10;    alias(libs.plugins.kotlin.compose)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;com.masum.learning&quot;&#13;&#10;    compileSdk = 36&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        applicationId = &quot;com.masum.learning&quot;&#13;&#10;        minSdk = 21&#13;&#10;    targetSdk = 36&#13;&#10;        versionCode = 1&#13;&#10;        versionName = &quot;1.0&quot;&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_11&#13;&#10;        targetCompatibility = JavaVersion.VERSION_11&#13;&#10;    }&#13;&#10;    kotlinOptions {&#13;&#10;        jvmTarget = &quot;11&quot;&#13;&#10;    }&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;    }&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = &quot;1.5.0&quot;&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;    implementation(libs.androidx.activity.compose)&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.androidx.ui)&#13;&#10;    implementation(libs.androidx.ui.graphics)&#13;&#10;    implementation(libs.androidx.ui.tooling.preview)&#13;&#10;    implementation(libs.androidx.material3)&#13;&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout-compose:1.0.1&quot;)&#13;&#10;    testImplementation(libs.junit)&#13;&#10;    androidTestImplementation(libs.androidx.junit)&#13;&#10;    androidTestImplementation(libs.androidx.espresso.core)&#13;&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#13;&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#13;&#10;    debugImplementation(libs.androidx.ui.tooling)&#13;&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/learning/Learnings/ConstraintLayout.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/learning/Learnings/ConstraintLayout.kt" />
              <option name="originalContent" value="package com.masum.learning.Learnings&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.constraintlayout.compose.ConstraintSet&#10;&#10;@Composable&#10;fun ConstraintLayout (modifier: Modifier = Modifier) {&#10;    val constraints = ConstraintSet {&#10;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.masum.learning.Learnings&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.constraintlayout.compose.ConstraintSet&#10;&#10;@Composable&#10;fun ConstraintLayout (modifier: Modifier = Modifier) {&#10;    val constraints = ConstraintSet {&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/learning/Learnings/Lists.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/learning/Learnings/Lists.kt" />
              <option name="originalContent" value="package com.masum.learning.Learnings&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun Lists (modifier: Modifier = Modifier) {&#10;    Column {&#10;        for (i in 1..50) {&#10;            Text(&#10;                text  = &quot;Item $i&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(vertical = 24.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.masum.learning.Learnings&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun Lists (modifier: Modifier = Modifier) {&#10;    Column {&#10;        for (i in 1..50) {&#10;            Text(&#10;                text  = &quot;Item $i&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(vertical = 24.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>