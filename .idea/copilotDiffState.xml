<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/learning/Learnings/ViewModels/LaunchedEffects/LaunchedEffectViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/learning/Learnings/ViewModels/LaunchedEffects/LaunchedEffectViewModel.kt" />
              <option name="originalContent" value="package com.masum.learning.Learnings.ViewModels.LaunchedEffects&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.flow.MutableSharedFlow&#10;import kotlinx.coroutines.flow.asSharedFlow&#10;import kotlinx.coroutines.launch&#10;&#10;// ViewModel to handle UI events using SharedFlow and coroutines&#10;class LaunchedEffectViewModel : ViewModel () {&#10;    // MutableSharedFlow to emit events from ViewModel&#10;    private val _sharedFlow = MutableSharedFlow&lt;ScreenEvents&gt; ()&#10;    // Exposed as read-only SharedFlow for observers (UI)&#10;    val sharedFlow = _sharedFlow.asSharedFlow()&#10;&#10;    init {&#10;        // Launch a coroutine when ViewModel is created&#10;        viewModelScope.launch {&#10;            // Emit a showSnackBar event with a message&#10;            _sharedFlow.emit(ScreenEvents.showSnackBar(&quot;Hello Masum&quot;))&#10;        }&#10;    }&#10;&#10;    // Sealed class to define possible UI events&#10;    sealed class ScreenEvents {&#10;        // Event to show a snackbar with a message&#10;        data class showSnackBar (val message: String) : ScreenEvents()&#10;        // Event to navigate to a route&#10;        data class navigate (val route: String) : ScreenEvents()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.masum.learning.Learnings.ViewModels.LaunchedEffects&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.flow.MutableSharedFlow&#10;import kotlinx.coroutines.flow.asSharedFlow&#10;import kotlinx.coroutines.launch&#10;&#10;// This ViewModel handle kore UI event using SharedFlow and coroutine&#10;class LaunchedEffectViewModel : ViewModel () {&#10;    // MutableSharedFlow, ViewModel theke event pathanor jonno&#10;    private val _sharedFlow = MutableSharedFlow&lt;ScreenEvents&gt; ()&#10;    // UI observer der jonno read-only SharedFlow&#10;    val sharedFlow = _sharedFlow.asSharedFlow()&#10;&#10;    init {&#10;        // ViewModel toiri hole coroutine chalu hoy&#10;        viewModelScope.launch {&#10;            // showSnackBar event pathano hoy ekta message shoho&#10;            _sharedFlow.emit(ScreenEvents.showSnackBar(&quot;Hello Masum&quot;))&#10;        }&#10;    }&#10;&#10;    // UI event er jonno sealed class&#10;    sealed class ScreenEvents {&#10;        // Snackbar dekhano event, message shoho&#10;        data class showSnackBar (val message: String) : ScreenEvents()&#10;        // Route e navigate korar event&#10;        data class navigate (val route: String) : ScreenEvents()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>